// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// co_glasso
List co_glasso(Eigen::Map<Eigen::MatrixXd> S, int pX, Eigen::Map<Eigen::MatrixXd> hpars, Eigen::Map<Eigen::MatrixXd> T_guess, bool scr, bool verbose, bool cov_output);
RcppExport SEXP _coglasso_co_glasso(SEXP SSEXP, SEXP pXSEXP, SEXP hparsSEXP, SEXP T_guessSEXP, SEXP scrSEXP, SEXP verboseSEXP, SEXP cov_outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type pX(pXSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type hpars(hparsSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type T_guess(T_guessSEXP);
    Rcpp::traits::input_parameter< bool >::type scr(scrSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type cov_output(cov_outputSEXP);
    rcpp_result_gen = Rcpp::wrap(co_glasso(S, pX, hpars, T_guess, scr, verbose, cov_output));
    return rcpp_result_gen;
END_RCPP
}
// co_glasso_D
List co_glasso_D(Eigen::Map<Eigen::MatrixXd> S, Rcpp::IntegerVector p, Eigen::Map<Eigen::MatrixXd> hpars, bool scr, bool verbose, bool cov_output);
RcppExport SEXP _coglasso_co_glasso_D(SEXP SSEXP, SEXP pSEXP, SEXP hparsSEXP, SEXP scrSEXP, SEXP verboseSEXP, SEXP cov_outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type hpars(hparsSEXP);
    Rcpp::traits::input_parameter< bool >::type scr(scrSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type cov_output(cov_outputSEXP);
    rcpp_result_gen = Rcpp::wrap(co_glasso_D(S, p, hpars, scr, verbose, cov_output));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_coglasso_co_glasso", (DL_FUNC) &_coglasso_co_glasso, 7},
    {"_coglasso_co_glasso_D", (DL_FUNC) &_coglasso_co_glasso_D, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_coglasso(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
