[{"path":"https://drquestion.github.io/coglasso/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://drquestion.github.io/coglasso/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://drquestion.github.io/coglasso/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://drquestion.github.io/coglasso/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://drquestion.github.io/coglasso/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://drquestion.github.io/coglasso/articles/coglasso.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Reconstructing mult-omics networks with coglasso","text":"vignette illustrates basic usage coglasso package reconstruct multi-omics network. package implements R interface collaborative graphical lasso (Albanese, Kohlen Behrouzi, 2024), network estimation algorithm based graphical lasso (Friedman, Hastie Tibshirani, 2008) collaborative regression (Gross Tibshirani, 2015) Let us first attach coglasso. choose multi-omics data set use. coglasso package offers three alternative version transcriptomics metabolomics data set. use multi_omics_sd_small. explanation available multi-omics data sets see help(multi_omics_sd). smaller version multi_omics_sd 19 variables, 14 genes 5 metabolites, 30 samples. can directly proceed network reconstruction.","code":"library(coglasso) colnames(multi_omics_sd_small) #>  [1] \"Cirbp\"       \"Hspa5\"       \"P4ha1\"       \"Spred1\"      \"Creld2\"      #>  [6] \"Pdia6\"       \"Hsp90b1\"     \"Hsph1\"       \"Manf\"        \"Pdia3\"       #> [11] \"Dnajb11\"     \"Dnajc3\"      \"BC004004\"    \"Stip1\"       \"Phe\"         #> [16] \"Trp\"         \"Putrescine\"  \"PC aa C36:3\" \"PC ae C32:2\" nrow(multi_omics_sd_small) #> [1] 30"},{"path":"https://drquestion.github.io/coglasso/articles/coglasso.html","id":"multi-omics-network-reconstruction","dir":"Articles","previous_headings":"","what":"Multi-omics network reconstruction","title":"Reconstructing mult-omics networks with coglasso","text":"objective reconstruct network data set using collaborative graphical lasso. coglasso package, mainly call function: bs(). function first estimates network every combination hyperparameters want explore, selects best combination according chosen model selection method. usual application bs() requires give input data set argument data, number variables various omics layers p, hyperparameter settings. Collaborative graphical lasso three hyperparameters: λwλ_w, penalizing “within” -type interactions, λbλ_b penalizing “” different-type interactions, cc, weight collaborative term. vignette choose explore 15 possible penalty values “within” “” penalties, three possible collaboration values. setting nlambda_w nlambda_b 15, setting nc 3. also decide focus search sparse side possible “within” networks. achieve setting fixed value ratio smallest (least penalizing) largest (penalizing) λwλ_w explored. default value parameter 0.1 λwλ_w λbλ_b, decide set minimum ratio 0.6 λwλ_w. also possible set options model selection procedure, one want enjoy comfort default behaviour. select best combination hyperparameters, set method “xestars” (default behaviour). implements eXtended Efficient StARS, significantly faster version eXtended StARS (XStARS, Albanese, Kohlen Behrouzi, 2024). XEStARS XStARS coglasso-adapted version StARS, stability selection method developed Liu, Roeder Wasserman (2010). suggested application bs() uses default options function. explanation selection methods available, arguments bs() use , please see help(bs). fast selected combination hyperparameters yielding stable, yet sparse coglasso network. can directly plot selected network :","code":"sel_cg <- bs(   multi_omics_sd_small,   p = c(14, 5),   nlambda_w = 15,   nlambda_b = 15,   nc = 3,   lambda_w_min_ratio = 0.6,   verbose = FALSE )  # To see information on the network estimation and selection: print(sel_cg) #> Selected network estimated with collaborative graphical lasso #>  #> The call was: #> bs(data = multi_omics_sd_small, p = c(14, 5), nlambda_w = 15,  #>     nlambda_b = 15, nc = 3, lambda_w_min_ratio = 0.6, verbose = FALSE) #>  #> The model selection method was: #> xestars #> The density of the selected network is: #> 0.04678363 #>  #> Networks are made of 2 omics layers, for a total of 19 nodes #> For each layer they have: 14 and 5 nodes, respectively #>  #> The selected value for lambda within is: #> 0.8503 #> The selected value for lambda between is: #> 0.5371 #> The selected value for c is: #> 1 #>  #> The total number of hyperparameter combinations explored was: #> 675 #> The values explored for lambda within were: #> 0.9137, 0.8933, 0.8722, 0.8503, 0.8276, 0.804, 0.7795, 0.7542, 0.7279, 0.7006, 0.6723, 0.643, 0.6125, 0.581, 0.5482 #> The values explored for lambda between were: #> 0.5922, 0.5816, 0.5691, 0.5544, 0.5371, 0.5166, 0.4925, 0.4641, 0.4306, 0.3912, 0.3447, 0.2898, 0.2252, 0.149, 0.0592 #> The values explored for c were: #> 0.01, 1, 100 #>  #> Plot the selected network with: #> plot(sel_cg) plot(sel_cg)"},{"path":"https://drquestion.github.io/coglasso/articles/coglasso.html","id":"ref","dir":"Articles","previous_headings":"","what":"References","title":"Reconstructing mult-omics networks with coglasso","text":"Albanese, ., Kohlen, W., & Behrouzi, P. (2024). Collaborative graphical lasso (arXiv:2403.18602). arXiv https://doi.org/10.48550/arXiv.2403.18602 Friedman, J., Hastie, T., & Tibshirani, R. (2008). Sparse inverse covariance estimation graphical lasso. Biostatistics, 9(3), 432–441. https://doi.org/10.1093/biostatistics/kxm045 Gross, S. M., & Tibshirani, R. (2015). Collaborative regression. Biostatistics, 16(2), 326–338. https://doi.org/10.1093/biostatistics/kxu047 Liu, H., Roeder, K., & Wasserman, L. (2010). Stability Approach Regularization Selection (StARS) High Dimensional Graphical Models (arXiv:1006.3316). arXiv https://doi.org/10.48550/arXiv.1006.3316","code":""},{"path":"https://drquestion.github.io/coglasso/articles/manuscript.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Reproduction of manuscript's results","text":"vignette serves purpose reproduce results shown section “Real data example” manuscript describing collaborative graphical lasso (Albanese, Kohlen Behrouzi, 2024). computations carried following code heavy take considerable amount time. machine (RAM 48 Gb, CPU Intel(R) Xeon(R) W-2235 CPU @ 3.80GHz) took almost 3 hours. Hence, refer user wants get started package introductory vignette: vignette(\"coglasso\"). Collaborative graphical lasso algorithm reconstruct multi-omics networks based graphical lasso (Friedman, Hastie Tibshirani, 2008) collaborative regression (Gross Tibshirani, 2015). coglasso package implements R interface algorithm. use reproduce results obtained original manuscript. Let us first attach coglasso. use multi-omics data set provided package, largest version: multi_omics_sd. Let’s inspect description manual. notice data set 162 transcripts 76 metabolites. information data set sources generation, refer user script multi_omics_sd.R GitHub repository package.","code":"library(coglasso) help(multi_omics_sd)"},{"path":"https://drquestion.github.io/coglasso/articles/manuscript.html","id":"reproducing-the-results","dir":"Articles","previous_headings":"","what":"Reproducing the results","title":"Reproduction of manuscript's results","text":"multi-omics network reconstruction carried manuscript explored 30 automatically generated λwλ_w λbλ_b values 9 given cc values. can now build networks, one per combination chosen hyperparameters, coglasso(). proceed now select stable, yet sparse network, using eXtended StARS (XStARS, Albanese, Kohlen Behrouzi, 2024), adaptation coglasso StARS (Liu, Roeder Wasserman, 2010). function implementing XStARS select_coglasso(), setting argument method “xstars” (default behaviour). display now selected network using package igraph, reproducing one displayed Figure 3 manuscript. orientation network may vary. now plot subnetwork gene Cirbp neighborhood. reproduces network displayed Figure 4A. useful way extract information network community discovery. technique allows simplify network breaking functional units nodes share several connections, enough recognized separate communities. manuscript used greedy algorithm described Clauset, Newman Moore, 2004, part igraph toolkit. focused inspected second largest community, shown Figure 4B. code reproduce .","code":"nlambda_w <- 30 nlambda_b <- 30 cs <- c(0.01, 0.05, 0.1, 0.2, 1, 5, 10, 20, 100) cg <- coglasso(multi_omics_sd,   p = 162,   nlambda_w = nlambda_w,   nlambda_b = nlambda_b,   c = cs ) set.seed(42) sel_cg <- select_coglasso(cg, method = \"xstars\") plot(sel_cg) igraph::V(sel_graph)$label<-colnames(sel_cg$data) cirbp_index <- which(colnames(sel_cg$data) == \"Cirbp\") subnetwork <- igraph::subgraph(   sel_graph,   c(cirbp_index, igraph::neighbors(sel_graph, cirbp_index)) ) plot(subnetwork) communities <- igraph::cluster_fast_greedy(sel_graph) community2 <- communities[[2]] community2_graph<-igraph::subgraph(sel_graph, community2)  # Focusing on nodes of interest fosjun_erg_AA <- c(\"Fos\", \"Fosb\", \"Junb\", \"Fosl2\", \"Egr1\", \"Egr2\", \"Egr3\", \"Ala\", \"Arg\", \"Asn\",\"His\",\"Ile\",\"Leu\",\"Lys\",\"Met\",\"Orn\",\"Phe\",\"Ser\",\"Thr\",\"Tyr\",\"Val\") igraph::V(community2_igraph)[!(label %in% fosjun_erg_AA)]$color<-c(rep(\"#3bd8ff\", 29), rep(\"#ffadad\", 5)) igraph::V(community2_igraph)[!(label %in% fosjun_erg_AA)]$frame.color<-NA igraph::V(community2_igraph)[!(label %in% fosjun_erg_AA)]$label<-NA  lo_community2 <- igraph::layout_with_fr(community2_graph) plot(community2_graph, layout=lo_community2)"},{"path":"https://drquestion.github.io/coglasso/articles/manuscript.html","id":"ref","dir":"Articles","previous_headings":"","what":"References","title":"Reproduction of manuscript's results","text":"Albanese, ., Kohlen, W., & Behrouzi, P. (2024). Collaborative graphical lasso (arXiv:2403.18602). arXiv https://doi.org/10.48550/arXiv.2403.18602 Friedman, J., Hastie, T., & Tibshirani, R. (2008). Sparse inverse covariance estimation graphical lasso. Biostatistics, 9(3), 432–441. https://doi.org/10.1093/biostatistics/kxm045 Gross, S. M., & Tibshirani, R. (2015). Collaborative regression. Biostatistics, 16(2), 326–338. https://doi.org/10.1093/biostatistics/kxu047 Liu, H., Roeder, K., & Wasserman, L. (2010). Stability Approach Regularization Selection (StARS) High Dimensional Graphical Models (arXiv:1006.3316). arXiv. https://doi.org/10.48550/arXiv.1006.3316 Clauset, ., Newman, M. E. J., & Moore, C. (2004). Finding community structure large networks. Physical Review E, 70(6), 066111. https://doi.org/10.1103/PhysRevE.70.066111","code":""},{"path":"https://drquestion.github.io/coglasso/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alessio Albanese. Author, maintainer, copyright holder. Pariya Behrouzi. Author.","code":""},{"path":"https://drquestion.github.io/coglasso/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Albanese , Kohlen W, Behrouzi P (2024). “Collaborative graphical lasso.” doi:10.48550/arXiv.2403.18602, http://arxiv.org/abs/2403.18602.","code":"@Misc{,   title = {Collaborative graphical lasso},   author = {Alessio Albanese and Wouter Kohlen and Pariya Behrouzi},   publisher = {arXiv},   year = {2024},   url = {http://arxiv.org/abs/2403.18602},   doi = {10.48550/arXiv.2403.18602}, }"},{"path":"https://drquestion.github.io/coglasso/index.html","id":"coglasso---collaborative-graphical-lasso-","dir":"","previous_headings":"","what":"Collaborative Graphical Lasso - Multi-Omics Network Reconstruction","title":"Collaborative Graphical Lasso - Multi-Omics Network Reconstruction","text":"Coglasso implements collaborative graphical lasso, algorithm network reconstruction multi-omics data sets (Albanese, Kohlen Behrouzi, 2024). algorithm joins principles graphical lasso Friedman, Hastie Tibshirani (2008) collaborative regression Gross Tibshirani (2015).","code":""},{"path":"https://drquestion.github.io/coglasso/index.html","id":"installing-coglasso","dir":"","previous_headings":"","what":"Installing coglasso","title":"Collaborative Graphical Lasso - Multi-Omics Network Reconstruction","text":"can install CRAN release coglasso :","code":"install.packages(\"coglasso\")"},{"path":"https://drquestion.github.io/coglasso/index.html","id":"installing-the-development-version","dir":"","previous_headings":"","what":"Installing the development version","title":"Collaborative Graphical Lasso - Multi-Omics Network Reconstruction","text":"install development version coglasso GitHub need make sure install devtools : can install development version :","code":"if (!require(\"devtools\")) {   install.packages(\"devtools\") } devtools::install_github(\"DrQuestion/coglasso\")"},{"path":"https://drquestion.github.io/coglasso/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Collaborative Graphical Lasso - Multi-Omics Network Reconstruction","text":"follows example reconstruct select multi-omics network collaborative graphical lasso. exhaustive example refer user vignette vignette(\"coglasso\"). package provides example multi-omics data sets different dimensions, use multi_omics_sd_small. current version coglasso package accepts multi-omics data sets multiple “omic” layers, single layers grouped column. example, multi_omics_sd_small first 14 columns represent transcript abundances, 5 columns represent metabolite abundances. function perform network estimation network selection bs(). suggested usage bs() needs input data set, dimensions “omic” layers, number values explore hyperparameter. bs() explores several combinations hyperparameters characterizing collaborative graphical lasso. , selects combination yielding best network according chosen model selection method. Among others, function implements eXtended Efficient StARS (XEStARS), significantly faster memory-efficient version eXtended StARS (XStARS, Albanese, Kohlen Behrouzi, 2024). coglasso-adapted versions StARS selection algorithm (Liu, Roeder Wasserman, 2010) selecting hyperparameter combination yields stable, yet sparse network. XEStARS default option parameter method, enough enjoy comfort default behaviour let function rest. plot selected network, use:","code":"library(coglasso)  sel_cg <- bs(multi_omics_sd_small, pX = c(14, 5), nlambda_w = 15, nlambda_b = 15, nc = 5)  # To see information about the network estimation and selection print(sel_cg) plot(sel_cg)"},{"path":"https://drquestion.github.io/coglasso/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Collaborative Graphical Lasso - Multi-Omics Network Reconstruction","text":"Albanese, ., Kohlen, W., & Behrouzi, P. (2024). Collaborative graphical lasso (arXiv:2403.18602). arXiv https://doi.org/10.48550/arXiv.2403.18602 Friedman, J., Hastie, T., & Tibshirani, R. (2008). Sparse inverse covariance estimation graphical lasso. Biostatistics, 9(3), 432–441. https://doi.org/10.1093/biostatistics/kxm045 Gross, S. M., & Tibshirani, R. (2015). Collaborative regression. Biostatistics, 16(2), 326–338. https://doi.org/10.1093/biostatistics/kxu047 Liu, H., Roeder, K., & Wasserman, L. (2010). Stability Approach Regularization Selection (StARS) High Dimensional Graphical Models (arXiv:1006.3316). arXiv https://doi.org/10.48550/arXiv.1006.3316","code":""},{"path":"https://drquestion.github.io/coglasso/reference/bs.html","id":null,"dir":"Reference","previous_headings":"","what":"Build multiple networks and select the best one from a multi-omics data set — bs","title":"Build multiple networks and select the best one from a multi-omics data set — bs","text":"bs() wraps two main functions package single one: coglasso(), build multiple multi-omics networks, select_coglasso() select best one according chosen criterion.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/bs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build multiple networks and select the best one from a multi-omics data set — bs","text":"","code":"bs(   data,   p = NULL,   pX = lifecycle::deprecated(),   lambda_w = NULL,   lambda_b = NULL,   c = NULL,   nlambda_w = NULL,   nlambda_b = NULL,   nc = NULL,   lambda_w_max = NULL,   lambda_b_max = NULL,   c_max = NULL,   lambda_w_min_ratio = NULL,   lambda_b_min_ratio = NULL,   c_min = NULL,   icov_guess = NULL,   cov_output = FALSE,   lock_lambdas = FALSE,   method = \"xestars\",   stars_thresh = 0.1,   stars_subsample_ratio = NULL,   rep_num = 20,   max_iter = 10,   old_sampling = FALSE,   ebic_gamma = 0.5,   verbose = TRUE )"},{"path":"https://drquestion.github.io/coglasso/reference/bs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build multiple networks and select the best one from a multi-omics data set — bs","text":"data input multi-omics data set. Rows samples, columns variables. Variables grouped assay (e.g. transcripts first, metabolites). data required parameter. p vector number variables omic layer data set (e.g. number transcripts, metabolites etc.), order layers data set. given single number, coglasso() assumes total data sets two, number given dimension first one. pX pX longer supported. Please use p. lambda_w vector values parameter \\(\\lambda_w\\), penalization parameter \"within\" interactions. Overrides nlambda_w. lambda_b vector values parameter \\(\\lambda_b\\), penalization parameter \"\" interactions. Overrides nlambda_b. c vector values parameter \\(c\\), weight given collaboration. Overrides nc. nlambda_w number requested \\(\\lambda_w\\) parameters explore. sequence size nlambda_w \\(\\lambda_w\\) parameters generated. Defaults 8. Ignored lambda_w set user. nlambda_b number requested \\(\\lambda_b\\) parameters explore. sequence size nlambda_b \\(\\lambda_b\\) parameters generated. Defaults 8. Ignored lambda_b set user. nc number requested \\(c\\) parameters explore. sequence size nc \\(c\\) parameters generated. Defaults 5. Ignored c set user. lambda_w_max greatest generated \\(\\lambda_w\\). default computed data-driven approach. Ignored lambda_w set user. lambda_b_max greatest generated \\(\\lambda_b\\). default computed data-driven approach. Ignored lambda_b set user. c_max greatest \\(c\\) explored. Defaults 100. Ignored c set user. lambda_w_min_ratio ratio smallest generated \\(\\lambda_w\\) greatest generated \\(\\lambda_w\\). Defaults 0.1. Ignored lambda_w set user. lambda_b_min_ratio ratio smallest generated \\(\\lambda_b\\) greatest generated \\(\\lambda_b\\). Defaults 0.1. Ignored lambda_b set user. c_min smallest \\(c\\) explored. Defaults \\(\\frac{1}{c_{max}}\\), 0.01 c_max set user. Ignored c set user. icov_guess Use predetermined inverse covariance matrix initial guess network estimation. cov_output Add estimated variance-covariance matrix output. lock_lambdas Set \\(\\lambda_w = \\lambda_b\\). Force single lambda parameter \"within\" \"\" interactions. method model selection method select best combination hyperparameters. available options \"xstars\", \"xestars\" \"eBIC\". Defaults \"xestars\". stars_thresh threshold set variability explored networks iteration algorithm. \\(\\lambda_w\\) \\(\\lambda_b\\) associated stable network threshold overcome selected. stars_subsample_ratio proportion samples multi-omics data set randomly subsampled estimate variability network given hyperparameters setting. Defaults 80% number samples smaller 144, otherwise defaults \\(\\frac{10}{n}\\sqrt{n}\\). rep_num amount subsamples multi-omics data set used estimate variability network given hyperparameters setting. Defaults 20. max_iter greatest number times algorithm allowed choose new best \\(\\lambda_w\\). Defaults 10. old_sampling Perform subsampling xstars() set TRUE. Makes difference bigger data sets, computing correlation matrix take significantly longer. Defaults FALSE. ebic_gamma \\(\\gamma\\) tuning parameter eBIC selection, set 0 1. set 0 one standard BIC. Defaults 0.5. verbose Print information regarding network building network selection processes.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/bs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build multiple networks and select the best one from a multi-omics data set — bs","text":"bs() returns object S3 class select_coglasso containing several elements. important probably sel_adj, adjacency matrix selected network. output elements depend chosen model selection method. elements always returned, result network estimation coglasso(): loglik numerical vector containing \\(log\\) likelihoods estimated networks. density numerical vector containing measure density estimated networks. df integer vector containing degrees freedom estimated networks. convergence binary vector containing whether network successfully estimated given combination hyperparameters . path list containing adjacency matrices estimated networks. icov list containing inverse covariance matrices estimated networks. nexploded number combinations hyperparameters coglasso() failed converge. data input multi-omics data set. hpars ordered table combinations hyperparameters given input bs(), \\(\\alpha(\\lambda_w+\\lambda_b)\\) key sort rows. lambda_w, lambda_b, c numerical vectors , respectively, \\(\\lambda_w\\), \\(\\lambda_b\\), \\(c\\) values bs() used. p vector number variables omic layer data set. D number omics layers data set. cov optional, returned cov_output TRUE, list containing variance-covariance matrices estimated networks. elements returned selection methods available: sel_index_c, sel_index_lw sel_index_lb indexes final selected parameters \\(c\\), \\(\\lambda_w\\) \\(\\lambda_b\\) leading stable sparse network. sel_c, sel_lambda_w sel_lambda_b final selected parameters \\(c\\), \\(\\lambda_w\\) \\(\\lambda_b\\) leading stable sparse network. sel_adj adjacency matrix final selected network. sel_density density final selected network. sel_icov inverse covariance matrix final selected network. sel_cov optional, given coglasso() called cov_output = TRUE. covariance matrix associated final selected network. call matched call. method chosen model selection method. additional elements returned choosing \"xestars\" \"xstars\": merge \"merged\" adjacency matrix, average adjacency matrices estimated across different subsamples selected combination \\(\\lambda_w\\), \\(\\lambda_b\\), \\(c\\) values last path explored convergence. entry measure recurrent corresponding edge across subsamples. variability_lw, variability_lb variability_c numeric vectors many items number \\(\\lambda_w\\), \\(\\lambda_b\\), \\(c\\) values explored. item variability network estimated corresponding hyperparameter value, keeping two hyperparameters fixed selected value. sel_variability variability final selected network. additional elements returned choosing \"ebic\": ebic_scores numerical vector containing eBIC scores hyperparameter combination.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/bs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build multiple networks and select the best one from a multi-omics data set — bs","text":"using bs(), first, coglasso() estimates multiple multi-omics networks algorithm collaborative graphical lasso, one combination input values hyperparameters \\(\\lambda_w\\), \\(\\lambda_b\\) \\(c\\). , select_coglasso() selects best combination hyperparameters given coglasso() according selected model selection method. three availble options can set argument method  \"xstars\", \"xestars\" \"ebic\". information selection methods, visit help page select_coglasso().","code":""},{"path":"https://drquestion.github.io/coglasso/reference/bs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build multiple networks and select the best one from a multi-omics data set — bs","text":"","code":"# Suggested usage: give the input data set, set the values for `p` and the  # number of hyperparameters to explore (to choose how extensively to explore  # the possible hyperparameters). Then, let the default behavior do the rest:  sel_mo_net <- bs(multi_omics_sd_micro, p = c(4, 2), nlambda_w = 3,                   nlambda_b = 3, nc = 3, verbose = FALSE)"},{"path":"https://drquestion.github.io/coglasso/reference/coglasso-package.html","id":null,"dir":"Reference","previous_headings":"","what":"coglasso: Collaborative Graphical Lasso - Multi-Omics Network Reconstruction — coglasso-package","title":"coglasso: Collaborative Graphical Lasso - Multi-Omics Network Reconstruction — coglasso-package","text":"Reconstruct networks multi-omics data sets collaborative graphical lasso (coglasso) algorithm described Albanese, ., Kohlen, W., Behrouzi, P. (2024) arXiv:2403.18602. Use main wrapper function `bs()` build select multi-omics network.","code":""},{"path":[]},{"path":"https://drquestion.github.io/coglasso/reference/coglasso-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"coglasso: Collaborative Graphical Lasso - Multi-Omics Network Reconstruction — coglasso-package","text":"Maintainer: Alessio Albanese alessio.albanese@wur.nl (ORCID) [copyright holder] Authors: Pariya Behrouzi pariya.behrouzi@wur.nl (ORCID)","code":""},{"path":"https://drquestion.github.io/coglasso/reference/coglasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate networks from a multi-omics data set — coglasso","title":"Estimate networks from a multi-omics data set — coglasso","text":"coglasso() estimates multiple multi-omics networks algorithm collaborative graphical lasso, one combination input values hyperparameters \\(\\lambda_w\\), \\(\\lambda_b\\) \\(c\\).","code":""},{"path":"https://drquestion.github.io/coglasso/reference/coglasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate networks from a multi-omics data set — coglasso","text":"","code":"coglasso(   data,   p = NULL,   pX = lifecycle::deprecated(),   lambda_w = NULL,   lambda_b = NULL,   c = NULL,   nlambda_w = NULL,   nlambda_b = NULL,   nc = NULL,   lambda_w_max = NULL,   lambda_b_max = NULL,   c_max = NULL,   lambda_w_min_ratio = NULL,   lambda_b_min_ratio = NULL,   c_min = NULL,   icov_guess = NULL,   cov_output = FALSE,   lock_lambdas = FALSE,   verbose = TRUE )"},{"path":"https://drquestion.github.io/coglasso/reference/coglasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate networks from a multi-omics data set — coglasso","text":"data input multi-omics data set. Rows samples, columns variables. Variables grouped assay (e.g. transcripts first, metabolites). data required parameter. p vector number variables omic layer data set (e.g. number transcripts, metabolites etc.), order layers data set. given single number, coglasso() assumes total data sets two, number given dimension first one. pX pX longer supported. Please use p. lambda_w vector values parameter \\(\\lambda_w\\), penalization parameter \"within\" interactions. Overrides nlambda_w. lambda_b vector values parameter \\(\\lambda_b\\), penalization parameter \"\" interactions. Overrides nlambda_b. c vector values parameter \\(c\\), weight given collaboration. Overrides nc. nlambda_w number requested \\(\\lambda_w\\) parameters explore. sequence size nlambda_w \\(\\lambda_w\\) parameters generated. Defaults 8. Ignored lambda_w set user. nlambda_b number requested \\(\\lambda_b\\) parameters explore. sequence size nlambda_b \\(\\lambda_b\\) parameters generated. Defaults 8. Ignored lambda_b set user. nc number requested \\(c\\) parameters explore. sequence size nc \\(c\\) parameters generated. Defaults 5. Ignored c set user. lambda_w_max greatest generated \\(\\lambda_w\\). default computed data-driven approach. Ignored lambda_w set user. lambda_b_max greatest generated \\(\\lambda_b\\). default computed data-driven approach. Ignored lambda_b set user. c_max greatest \\(c\\) explored. Defaults 100. Ignored c set user. lambda_w_min_ratio ratio smallest generated \\(\\lambda_w\\) greatest generated \\(\\lambda_w\\). Defaults 0.1. Ignored lambda_w set user. lambda_b_min_ratio ratio smallest generated \\(\\lambda_b\\) greatest generated \\(\\lambda_b\\). Defaults 0.1. Ignored lambda_b set user. c_min smallest \\(c\\) explored. Defaults \\(\\frac{1}{c_{max}}\\), 0.01 c_max set user. Ignored c set user. icov_guess Use predetermined inverse covariance matrix initial guess network estimation. cov_output Add estimated variance-covariance matrix output. lock_lambdas Set \\(\\lambda_w = \\lambda_b\\). Force single lambda parameter \"within\" \"\" interactions. verbose Print information regarding current coglasso run console.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/coglasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate networks from a multi-omics data set — coglasso","text":"coglasso() returns object S3 class coglasso, following elements: loglik numerical vector containing \\(log\\) likelihoods estimated networks. density numerical vector containing measure density estimated networks. df integer vector containing degrees freedom estimated networks. convergence binary vector containing whether network successfully estimated given combination hyperparameters . path list containing adjacency matrices estimated networks. icov list containing inverse covariance matrices estimated networks. nexploded number combinations hyperparameters coglasso() failed converge. data input multi-omics data set. hpars ordered table combinations hyperparameters given input coglasso(), \\(\\alpha(\\lambda_w+\\lambda_b)\\) key sort rows. lambda_w numerical vector \\(\\lambda_w\\) values coglasso() used. lambda_b numerical vector \\(\\lambda_b\\) values coglasso() used. c numerical vector \\(c\\) values coglasso() used. p vector number variables omic layer data set. D number omics layers data set. icov_guess optional, returned icov_guess given. predetermined inverse covariance matrix  given user initial guess network estimation. cov optional, returned cov_output TRUE, list containing variance-covariance matrices estimated networks. call matched call.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/coglasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate networks from a multi-omics data set — coglasso","text":"","code":"# Typical usage: set the number of hyperparameters to explore cg <- coglasso(multi_omics_sd_micro,   p = c(4, 2), nlambda_w = 3,   nlambda_b = 3, nc = 3, verbose = FALSE ) # \\donttest{ # Model selection using eXtended Efficient StARS, takes less than five seconds sel_cg_xestars <- select_coglasso(cg, method = \"xestars\", verbose = FALSE) # }"},{"path":"https://drquestion.github.io/coglasso/reference/get_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a coglasso network — get_network","title":"Extract a coglasso network — get_network","text":"get_network() extracts selected network select_coglasso object, different specific one either select_coglasso coglasso object specifying optional parameters.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/get_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a coglasso network — get_network","text":"","code":"get_network(sel_cg_obj, index_c = NULL, index_lw = NULL, index_lb = NULL)"},{"path":"https://drquestion.github.io/coglasso/reference/get_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a coglasso network — get_network","text":"sel_cg_obj object S3 class select_coglasso S3 class coglasso. index_c index \\(c\\) value different one selected model selection. set desired network selected one. index_lw index \\(\\lambda_w\\) value chosen non-optimal network. set desired network selected one. index_lb index \\(\\lambda_b\\) value chosen non-optimal network. set desired network selected one.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/get_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a coglasso network — get_network","text":"get_network() returns selected network, form object class igraph.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/get_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract a coglasso network — get_network","text":"input coglasso object, necessary specify indexes extract chosen network.  input select_coglasso object, extracts default selected network. selection method \"ebic\", want extract different network selected one, specify indexes. Otherwise, objective extract optimal network specific \\(c\\) value different selected one, set index_c chosen one. Also possible extract specific non-optimal network setting indexes chosen ones.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/get_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a coglasso network — get_network","text":"","code":"# \\donttest{ sel_cg <- bs(multi_omics_sd_micro, p = c(4, 2), nlambda_w = 3, nlambda_b = 3,                  nc = 3, verbose = FALSE) sel_net <- get_network(sel_cg) # Could even plot the selected network with plot(sel_net), but then it would # plot an unnotated network, better to directly plot(sel_cg). print(sel_net) #> IGRAPH eb86bed UN-- 6 0 --  #> + attr: name (v/c), label (v/c) #> + edges from eb86bed (vertex names): # }"},{"path":"https://drquestion.github.io/coglasso/reference/get_pcor.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a coglasso partial correlation matrix — get_pcor","title":"Extract a coglasso partial correlation matrix — get_pcor","text":"get_pcor() extracts selected partial correlation matrix select_coglasso object, different specific one either select_coglasso coglasso object specifying optional parameters.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/get_pcor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a coglasso partial correlation matrix — get_pcor","text":"","code":"get_pcor(sel_cg_obj, index_c = NULL, index_lw = NULL, index_lb = NULL)"},{"path":"https://drquestion.github.io/coglasso/reference/get_pcor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a coglasso partial correlation matrix — get_pcor","text":"sel_cg_obj object S3 class select_coglasso S3 class coglasso. index_c index \\(c\\) value different one selected model selection. set desired partial correlation matrix selected one. index_lw index \\(\\lambda_w\\) value chosen non-optimal partial correlation matrix. set desired partial correlation matrix selected one. index_lb index \\(\\lambda_b\\) value chosen non-optimal partial correlation matrix. set desired partial correlation matrix selected one.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/get_pcor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a coglasso partial correlation matrix — get_pcor","text":"get_pcor() returns selected partial correlation matrix.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/get_pcor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract a coglasso partial correlation matrix — get_pcor","text":"input coglasso object, necessary specify indexes extract chosen partial correlation matrix.  input select_coglasso object, extracts default selected partial correlation matrix. selection method \"ebic\", want extract different partial correlation matrix selected one, specify indexes. Otherwise, objective extract optimal partial correlation matrix specific \\(c\\) value different selected one, set index_c chosen one. Also possible extract specific non-optimal partial correlation matrix setting indexes chosen ones.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/get_pcor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a coglasso partial correlation matrix — get_pcor","text":"","code":"# \\donttest{ sel_cg <- bs(multi_omics_sd_micro, p = c(4, 2), nlambda_w = 3, nlambda_b = 3,                  nc = 3, verbose = FALSE) sel_pcor <- get_pcor(sel_cg) print(sel_pcor) #>             Cirbp Hspa5 Hsp90b1 Dnajb11 Trp PC aa C36:3 #> Cirbp           1     0       0       0   0           0 #> Hspa5           0     1       0       0   0           0 #> Hsp90b1         0     0       1       0   0           0 #> Dnajb11         0     0       0       1   0           0 #> Trp             0     0       0       0   1           0 #> PC aa C36:3     0     0       0       0   0           1 # }"},{"path":"https://drquestion.github.io/coglasso/reference/multi_omics_sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-omics dataset of sleep deprivation in mouse — multi_omics_sd","title":"Multi-omics dataset of sleep deprivation in mouse — multi_omics_sd","text":"dataset containing transcript metabolite values analysed Albanese et al. 2023, subset multi-omics data set published Jan, M., Gobet, N., Diessler, S. et al. multi-omics digital research object genetics sleep regulation. Sci Data 6, 258 (2019). multi_omics_sd_small smaller version, limited transcript Cirbp transcripts metabolites belonging neighborhood described Albanese et al. 2023 multi_omics_sd_micro minimal version Cirbp selection neighborhood.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/multi_omics_sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-omics dataset of sleep deprivation in mouse — multi_omics_sd","text":"","code":"multi_omics_sd  multi_omics_sd_small  multi_omics_sd_micro"},{"path":[]},{"path":"https://drquestion.github.io/coglasso/reference/multi_omics_sd.html","id":"multi-omics-sd","dir":"Reference","previous_headings":"","what":"multi_omics_sd","title":"Multi-omics dataset of sleep deprivation in mouse — multi_omics_sd","text":"data frame 30 rows 238 variables (162 transcripts 76 metabolites): Plin4 Tfrc log2 CPM values 162 transcripts mouse cortex sleep deprivation (-4.52–10.46) Ala SM C24:1 abundance values 76 metabolites (0.02–1112.67)","code":""},{"path":"https://drquestion.github.io/coglasso/reference/multi_omics_sd.html","id":"multi-omics-sd-small","dir":"Reference","previous_headings":"","what":"multi_omics_sd_small","title":"Multi-omics dataset of sleep deprivation in mouse — multi_omics_sd","text":"data frame 30 rows 19 variables (14 transcripts 5 metabolites) Cirbp Stip1 log2 CPM values 14 transcripts mouse cortex sleep deprivation (4.24–9.31) Phe PC ae C32:2 Abundance values 5 metabolites (0.17–145.33)","code":""},{"path":"https://drquestion.github.io/coglasso/reference/multi_omics_sd.html","id":"multi-omics-sd-micro","dir":"Reference","previous_headings":"","what":"multi_omics_sd_micro","title":"Multi-omics dataset of sleep deprivation in mouse — multi_omics_sd","text":"data frame 30 rows 6 variables (4 transcripts 2 metabolites) Cirbp Dnajb11 log2 CPM values 4 transcripts mouse cortex sleep deprivation (4.78–9.31) Trp PC aa C36:3 Abundance values 2 metabolites (58.80–145.33)","code":""},{"path":"https://drquestion.github.io/coglasso/reference/multi_omics_sd.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Multi-omics dataset of sleep deprivation in mouse — multi_omics_sd","text":"Jan, M., Gobet, N., Diessler, S. et al. multi-omics digital research object genetics sleep regulation. Sci Data 6, 258 (2019) doi:10.1038/s41597-019-0171-x Figshare folder original manuscript: https://figshare.com/articles/dataset/Input_data_for_systems_genetics_of_sleep_regulation/7797434","code":""},{"path":"https://drquestion.github.io/coglasso/reference/plot.select_coglasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot selected coglasso networks — plot.select_coglasso","title":"Plot selected coglasso networks — plot.select_coglasso","text":"plot.select_coglasso() creates annotated plot coglasso selected network object S3 class select_coglasso. Variables different data sets different color coding. plot network, enough use plot() call select_coglasso object. plot.coglasso() functioning select_coglasso.plot(), object S3 class coglasso. case, compulsory specify index_c, index_lw, index_lb.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/plot.select_coglasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot selected coglasso networks — plot.select_coglasso","text":"","code":"# S3 method for class 'select_coglasso' plot(   x,   index_c = NULL,   index_lw = NULL,   index_lb = NULL,   node_labels = TRUE,   hide_isolated = TRUE,   ... )  # S3 method for class 'coglasso' plot(   x,   index_c,   index_lw,   index_lb,   node_labels = TRUE,   hide_isolated = TRUE,   ... )"},{"path":"https://drquestion.github.io/coglasso/reference/plot.select_coglasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot selected coglasso networks — plot.select_coglasso","text":"x object S3 class select_coglasso. index_c index \\(c\\) value different one selected model selection. set desired network selected one. index_lw index \\(\\lambda_w\\) value chosen non-optimal network. set desired network selected one. index_lb index \\(\\lambda_b\\) value chosen non-optimal network. set desired network selected one. node_labels Show node names network. Defaults TRUE. hide_isolated Hide nodes connected node. Defaults TRUE. ... System required, used .","code":""},{"path":"https://drquestion.github.io/coglasso/reference/plot.select_coglasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot selected coglasso networks — plot.select_coglasso","text":"Returns NULL, invisibly.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/plot.select_coglasso.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot selected coglasso networks — plot.select_coglasso","text":"input coglasso object, necessary specify indexes extract chosen network.  input select_coglasso object, extracts default selected network. selection method \"ebic\", want extract different network selected one, specify indexes. Otherwise, objective extract optimal network specific \\(c\\) value different selected one, set index_c chosen one. Also possible extract specific non-optimal network setting indexes chosen ones.","code":""},{"path":[]},{"path":"https://drquestion.github.io/coglasso/reference/plot.select_coglasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot selected coglasso networks — plot.select_coglasso","text":"","code":"# \\donttest{ sel_cg <- bs(multi_omics_sd_small, p = c(14, 5), nlambda_w = 15, nlambda_b = 15,              nc = 3, lambda_w_min_ratio = 0.6, verbose = FALSE) plot(sel_cg)  # }"},{"path":"https://drquestion.github.io/coglasso/reference/select_coglasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Select the best coglasso network — select_coglasso","title":"Select the best coglasso network — select_coglasso","text":"select_coglasso() selects best combination hyperparameters given coglasso() according selected model selection method. three availble options can set argument method  \"xstars\", \"xestars\" \"ebic\".","code":""},{"path":"https://drquestion.github.io/coglasso/reference/select_coglasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select the best coglasso network — select_coglasso","text":"","code":"select_coglasso(   coglasso_obj,   method = \"xestars\",   stars_thresh = 0.1,   stars_subsample_ratio = NULL,   rep_num = 20,   max_iter = 10,   old_sampling = FALSE,   ebic_gamma = 0.5,   verbose = TRUE )"},{"path":"https://drquestion.github.io/coglasso/reference/select_coglasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select the best coglasso network — select_coglasso","text":"coglasso_obj object S3 class coglasso returned coglasso(). method model selection method select best combination hyperparameters. available options \"xstars\", \"xestars\" \"eBIC\". Defaults \"xestars\". stars_thresh threshold set variability explored networks iteration algorithm. \\(\\lambda_w\\) \\(\\lambda_b\\) associated stable network threshold overcome selected. stars_subsample_ratio proportion samples multi-omics data set randomly subsampled estimate variability network given hyperparameters setting. Defaults 80% number samples smaller 144, otherwise defaults \\(\\frac{10}{n}\\sqrt{n}\\). rep_num amount subsamples multi-omics data set used estimate variability network given hyperparameters setting. Defaults 20. max_iter greatest number times algorithm allowed choose new best \\(\\lambda_w\\). Defaults 10. old_sampling Perform subsampling xstars() set TRUE. Makes difference bigger data sets, computing correlation matrix take significantly longer. Defaults FALSE. ebic_gamma \\(\\gamma\\) tuning parameter eBIC selection, set 0 1. set 0 one standard BIC. Defaults 0.5. verbose Print information regarding progress selection procedure console.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/select_coglasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select the best coglasso network — select_coglasso","text":"select_coglasso() returns object S3 class select_coglasso containing results selection procedure, built upon object S3 class coglasso. output elements depend chosen model selection method.  elements returned methods: ... elements returned coglasso(). sel_index_c, sel_index_lw sel_index_lb indexes final selected parameters \\(c\\), \\(\\lambda_w\\) \\(\\lambda_b\\) leading stable sparse network. sel_c, sel_lambda_w sel_lambda_b final selected parameters \\(c\\), \\(\\lambda_w\\) \\(\\lambda_b\\) leading stable sparse network. sel_adj adjacency matrix final selected network. sel_density density final selected network. sel_icov inverse covariance matrix final selected network. sel_cov optional, given coglasso() called cov_output = TRUE. covariance matrix associated final selected network. call matched call. method chosen model selection method. additional elements returned choosing \"xestars\" \"xstars\": merge \"merged\" adjacency matrix, average adjacency matrices estimated across different subsamples selected combination \\(\\lambda_w\\), \\(\\lambda_b\\), \\(c\\) values last path explored convergence. entry measure recurrent corresponding edge across subsamples. variability_lw, variability_lb variability_c numeric vectors many items number \\(\\lambda_w\\), \\(\\lambda_b\\), \\(c\\) values explored. item variability network estimated corresponding hyperparameter value, keeping two hyperparameters fixed selected value. sel_variability variability final selected network. additional elements returned choosing \"ebic\": ebic_scores numerical vector containing eBIC scores hyperparameter combination.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/select_coglasso.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select the best coglasso network — select_coglasso","text":"select_coglasso() provides three model selection strategies: \"xstars\" uses eXtended StARS (XStARS) selecting stable, yet sparse network. Stability computed upon network estimation multiple subsamples multi-omics data set, allowing repetition. Subsamples collected fixed amount times (rep_num), fixed proportion total number samples (stars_subsample_ratio). See xstars() information methodology. \"xestars\" uses eXtended Efficient StARS (XEStARS), significantly faster version XStARS. produce marginally different results \"xstars\" due different sampling strategy. See xestars() information methodology. \"ebic\" uses extended Bayesian Information Criterion (eBIC) selecting network minimizes . gamma sets wait given extended component, turning model selection method standard BIC set 0.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/select_coglasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select the best coglasso network — select_coglasso","text":"","code":"cg <- coglasso(multi_omics_sd_micro, p = c(4, 2), nlambda_w = 3,                 nlambda_b = 3, nc = 3, verbose = FALSE) # Using eXtended Efficient StARS, takes less than five seconds sel_cg_xestars <- select_coglasso(cg, method = \"xestars\", verbose = FALSE) # \\donttest{ # Using eXtended StARS, takes around a minute sel_cg_xstars <- select_coglasso(cg, method = \"xstars\", verbose = FALSE) # } # Using eBIC sel_cg_ebic <- select_coglasso(cg, method = \"ebic\", verbose = FALSE)"},{"path":"https://drquestion.github.io/coglasso/reference/stars_coglasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Stability selection of the best coglasso network — stars_coglasso","title":"Stability selection of the best coglasso network — stars_coglasso","text":"stars_coglasso() deprecated favor xstars() function name reflect properly method implements. new function also allows new memory-lighter faster possibilities.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/stars_coglasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stability selection of the best coglasso network — stars_coglasso","text":"","code":"stars_coglasso(   coglasso_obj,   stars_thresh = 0.1,   stars_subsample_ratio = NULL,   rep_num = 20,   max_iter = 10,   verbose = FALSE )"},{"path":"https://drquestion.github.io/coglasso/reference/stars_coglasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stability selection of the best coglasso network — stars_coglasso","text":"","code":"cg <- coglasso(multi_omics_sd_micro, p = c(4, 2), nlambda_w = 3,                 nlambda_b = 3, nc = 3, verbose = FALSE) # \\donttest{ # Deprecated, use xstars() instead. Takes around one minute sel_cg <- stars_coglasso(cg, verbose = FALSE) #> Warning: `stars_coglasso()` was deprecated in coglasso 1.1.0. #> ℹ Please use `xstars()` instead. # -> sel_cg <- xstars(cg, verbose = FALSE) # }"},{"path":"https://drquestion.github.io/coglasso/reference/xestars.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficient stability selection of the best coglasso network — xestars","title":"Efficient stability selection of the best coglasso network — xestars","text":"xestars() provides efficient lighter implementation xstars() select combination hyperparameters given coglasso() yielding stable, yet sparse network. Stability computed upon network estimation multiple subsamples multi-omics data set, allowing repetition. Subsamples collected fixed amount times (rep_num), fixed proportion total number samples (stars_subsample_ratio).","code":""},{"path":"https://drquestion.github.io/coglasso/reference/xestars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficient stability selection of the best coglasso network — xestars","text":"","code":"xestars(   coglasso_obj,   stars_thresh = 0.1,   stars_subsample_ratio = NULL,   rep_num = 20,   max_iter = 10,   old_sampling = FALSE,   verbose = TRUE )"},{"path":"https://drquestion.github.io/coglasso/reference/xestars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficient stability selection of the best coglasso network — xestars","text":"coglasso_obj object S3 class coglasso returned coglasso(). stars_thresh threshold set variability explored networks iteration algorithm. \\(\\lambda_w\\) \\(\\lambda_b\\) associated stable network threshold overcome selected. stars_subsample_ratio proportion samples multi-omics data set randomly subsampled estimate variability network given hyperparameters setting. Defaults 80% number samples smaller 144, otherwise defaults \\(\\frac{10}{n}\\sqrt{n}\\). rep_num amount subsamples multi-omics data set used estimate variability network given hyperparameters setting. Defaults 20. max_iter greatest number times algorithm allowed choose new best \\(\\lambda_w\\). Defaults 10. old_sampling Perform subsampling xstars() set TRUE. Makes difference bigger data sets, computing correlation matrix take significantly longer. Defaults FALSE. verbose Print information regarding progress selection procedure console.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/xestars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Efficient stability selection of the best coglasso network — xestars","text":"xestars() returns object S3 class select_coglasso containing results selection procedure, built upon object S3 class coglasso returned coglasso(). ... elements returned coglasso(). merge \"merged\" adjacency matrix, average adjacency matrices estimated across different subsamples selected combination \\(\\lambda_w\\), \\(\\lambda_b\\), \\(c\\) values last path explored convergence. entry measure recurrent corresponding edge across subsamples. variability_lw, variability_lb variability_c numeric vectors many items number \\(\\lambda_w\\), \\(\\lambda_b\\), \\(c\\) values explored. item variability network estimated corresponding hyperparameter value, keeping two hyperparameters fixed selected value. sel_index_c, sel_index_lw sel_index_lb indexes final selected parameters \\(c\\), \\(\\lambda_w\\) \\(\\lambda_b\\) leading stable sparse network. sel_c, sel_lambda_w sel_lambda_b final selected parameters \\(c\\), \\(\\lambda_w\\) \\(\\lambda_b\\) leading stable sparse network. sel_adj adjacency matrix final selected network. sel_variability variability final selected network. sel_density density final selected network. sel_icov inverse covariance matrix final selected network. sel_cov optional, given coglasso() called cov_output = TRUE. covariance matrix associated  final selected network. call matched call. method chosen model selection method. , \"xestars\".","code":""},{"path":"https://drquestion.github.io/coglasso/reference/xestars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Efficient stability selection of the best coglasso network — xestars","text":"eXtended Efficient StARS (XEStARS) efficient memory-light version XStARS, adaptation collaborative graphical regression method published Liu, H. et al. (2010): Stability Approach Regularization Selection (StARS). StARS developed network estimation regulated single penalty parameter, collaborative graphical lasso needs explore three different hyperparameters. , different degree, direct influence network sparsity, hence stability. every iteration, xstars() explores one three parameters (\\(\\lambda_w\\), \\(\\lambda_b\\), \\(c\\)), keeping ones fixed previous selected estimate, using normal, one-dimentional StARS approach, finding best combination three. makes efficient xstars() different way stability check implemented two algorithms. xstars() (even original StARS), stability check performed, example, every \\(\\lambda_w\\) value (\\(\\lambda_b\\), \\(c\\)), values explored, algorithm selects one yielding stable, yet sparse network, switching selection following hyperparameter. xestars(), stability check becomes stopping criterion. moment stability threshold passed, value hyperparameter currently selected fixed, switch next one happens immediately, without exploring whole landscape. reduces sensibly number iterations convergence final network.  original XStARS computes new subsampling every time algorithm switches optimizing \\(\\lambda_w\\), \\(\\lambda_b\\), \\(c\\). allow compare hyperparameters equal ground, can slow selection bigger data set larger hyperparameter space. allow similar subsampling xstars(), old_sampling parameter implemented. set TRUE, subsampling similar one xstars() perform. Otherwise, subsampling performed beginning algorithm iterations.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/xestars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficient stability selection of the best coglasso network — xestars","text":"","code":"cg <- coglasso(multi_omics_sd_micro, p = c(4, 2), nlambda_w = 3,                 nlambda_b = 3, nc = 3, verbose = FALSE) # \\donttest{ # Takes less than five seconds sel_cg <- xestars(cg, verbose = FALSE) # }"},{"path":"https://drquestion.github.io/coglasso/reference/xstars.html","id":null,"dir":"Reference","previous_headings":"","what":"Stability selection of the best coglasso network — xstars","title":"Stability selection of the best coglasso network — xstars","text":"xstars() selects combination hyperparameters given coglasso() yielding stable, yet sparse network. Stability computed upon network estimation multiple subsamples multi-omics data set, allowing repetition. Subsamples collected fixed amount times (rep_num), fixed proportion total number samples (stars_subsample_ratio).","code":""},{"path":"https://drquestion.github.io/coglasso/reference/xstars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stability selection of the best coglasso network — xstars","text":"","code":"xstars(   coglasso_obj,   stars_thresh = 0.1,   stars_subsample_ratio = NULL,   rep_num = 20,   max_iter = 10,   verbose = TRUE )"},{"path":"https://drquestion.github.io/coglasso/reference/xstars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stability selection of the best coglasso network — xstars","text":"coglasso_obj object S3 class coglasso returned coglasso(). stars_thresh threshold set variability explored networks iteration algorithm. \\(\\lambda_w\\) \\(\\lambda_b\\) associated stable network threshold overcome selected. stars_subsample_ratio proportion samples multi-omics data set randomly subsampled estimate variability network given hyperparameters setting. Defaults 80% number samples smaller 144, otherwise defaults \\(\\frac{10}{n}\\sqrt{n}\\). rep_num amount subsamples multi-omics data set used estimate variability network given hyperparameters setting. Defaults 20. max_iter greatest number times algorithm allowed choose new best \\(\\lambda_w\\). Defaults 10. verbose Print information regarding progress selection procedure console.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/xstars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stability selection of the best coglasso network — xstars","text":"xstars() returns object S3 class select_coglasso containing results selection procedure, built upon object S3 class coglasso returned coglasso(). ... elements returned coglasso(). merge \"merged\" adjacency matrix, average adjacency matrices estimated across different subsamples selected combination \\(\\lambda_w\\), \\(\\lambda_b\\), \\(c\\) values last path explored convergence. entry measure recurrent corresponding edge across subsamples. variability_lw, variability_lb variability_c numeric vectors many items number \\(\\lambda_w\\), \\(\\lambda_b\\), \\(c\\) values explored. item variability network estimated corresponding hyperparameter value, keeping two hyperparameters fixed selected value. sel_index_c, sel_index_lw sel_index_lb indexes final selected parameters \\(c\\), \\(\\lambda_w\\) \\(\\lambda_b\\) leading stable sparse network. sel_c, sel_lambda_w sel_lambda_b final selected hyperparameters \\(c\\), \\(\\lambda_w\\) \\(\\lambda_b\\) leading stable sparse network. sel_adj adjacency matrix final selected network. sel_variability variability final selected network. sel_density density final selected network. sel_icov inverse covariance matrix final selected network. sel_cov optional, given coglasso() called cov_output = TRUE. covariance matrix associated final selected network. call matched call. method chosen model selection method. , \"xstars\".","code":""},{"path":"https://drquestion.github.io/coglasso/reference/xstars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stability selection of the best coglasso network — xstars","text":"eXtended StARS (XStARS) adaptation collaborative graphical regression method published Liu, H. et al. (2010): Stability Approach Regularization Selection (StARS). StARS developed network estimation regulated single penalty parameter, collaborative graphical lasso needs explore three different hyperparameters. , different degree, direct influence network sparsity, hence stability. every iteration, xstars() explores one three parameters (\\(\\lambda_w\\), \\(\\lambda_b\\), \\(c\\)), keeping ones fixed previous selected estimate, using normal, one-dimentional StARS approach, finding best combination three yields stable, yet sparse network.","code":""},{"path":"https://drquestion.github.io/coglasso/reference/xstars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stability selection of the best coglasso network — xstars","text":"","code":"cg <- coglasso(multi_omics_sd_micro, p = c(4, 2), nlambda_w = 3,                 nlambda_b = 3, nc = 3, verbose = FALSE) # \\donttest{ # Takes around one minute sel_cg <- xstars(cg, verbose = FALSE) # }"},{"path":"https://drquestion.github.io/coglasso/news/index.html","id":"coglasso-development-version","dir":"Changelog","previous_headings":"","what":"coglasso (development version)","title":"coglasso (development version)","text":"Changed xstars() algorithm perform stability-based selection c hyperparameter simultaneously lambda_w lambda_b. Began deprecation process stars_coglasso(), renamed accurate xstars(). Made also implementation improvements xstars() made faster. Corrected major bug xstars(), selection lambda_b never really happening, selecting lambda_w twice, instead. lead inevitable backward incompatibilities, least results previous version xstars(), reproducible. Implemented select_coglasso() handling possible present (future) model selection methods single wrapping function. moment allows perform model selection either eXtended StARS, eXtended Efficient StARS (see ), eBIC. Implemented bs() single wrapping function build multi-omics networks coglasso() select best one according preferred model selection method select_coglasso() single function call. Implemented xestars(), performing eXtended Efficient StARS, significantly faster version XStARS.much faster? tests, xestars() runs 80-90% faster xstars(), even specific instances.features make xestars() faster? First , check stability xstars() performed iterating throughout penalty parameters, implemented stopping criterion. Hence, less penalty parameters explored, moreover usually excluded lead denser network (longer network estimations). Second, use vectors instead matrixes keep track network variabilities makes algorithm proceed faster, former easier lighter objects deal . Third, new sampling strategy allows computation many correlation matrixes (input coglasso()), number repetitions algorithm beginning algorithm. original strategy performs every time algorithm switches selection lambda_w lambda_b (can happen several times). Especially larger data sets, consists huge difference.xstars() xestars() differ results?impressive increase speed comes minor costs. different sampling strategy guarantees faster, also fairer parameter selection, may lead different selected hyperparameters older new methodology. Created classes coglasso select_coglasso, related print() plot() methods. former returned using coglasso(), latter using function performs model selection final step (.e. bs(),select_coglasso(), model selection functions). Created plotting module. Now every function package produces selects network generates object can directly plotted plot(). Networks produced plot() weighted edges. Began implementation new version collaborative graphical lasso algorithm, now able accept two omics layers. new version, called general |D| version, provides results two omics layers, slightly slower, general |D| algorithm used necessary. current version convergence issues values c. Hopefully fixed 2.0 release. Began deprecation process argument pX functions coglasso() bs(), substituted argument p, can take vector dimensions multiple omics layer, now package accepts two omics layers. Added logo package, changed white background. Smaller functional bugs corrected. new parameter coglasso(), lock_lambdas, introduced simulate single penalty parameter-beahavior original glasso. currently chiefly testing purposes, implemented selection procedure , yet. Changed generation procedures lambda_w lambda_b: maximum values , respectively, highest within Pearson’s correlation value highest Pearson’s correlation value. Moreover, previous versions granularity search grid increased values lambda_w lambda_b decreased. major interest lies sparser network, granularity now inverted. Implemented new functions get_network() get_pcor(). two functions extract, respectively, network igraph format matrix partial correlations object either class coglasso class select_coglasso. # coglasso 1.0.2 Reformatted Description field DESCRIPTION file according CRAN reviewer’s comments.","code":""},{"path":"https://drquestion.github.io/coglasso/news/index.html","id":"coglasso-101","dir":"Changelog","previous_headings":"","what":"coglasso 1.0.1","title":"coglasso 1.0.1","text":"Made Description field DESCRIPTION file explanatory added official reference main method . Added official reference main method README file. Changed   man/stars_coglasso.Rd.","code":""},{"path":"https://drquestion.github.io/coglasso/news/index.html","id":"coglasso-100","dir":"Changelog","previous_headings":"","what":"coglasso 1.0.0","title":"coglasso 1.0.0","text":"Initial CRAN submission.","code":""}]
